const api="https://godbolt.org/api/",compiler_id="clang_trunk",lexy_id={id:'lexy',version:'trunk'};async function fetch_local_file(b){const a=await fetch(b);return a.ok?await a.text():""}export function list_of_productions(c){var a=[],b;const d=/(struct|class) ([a-zA-Z0-9_]+)/g;for(b=void 0;b=d.exec(c);)a.push(b[2]);return a}export async function preprocess_source(c,a,b){if(c=='playground'){const c=await fetch_local_file('/cpp/playground_headers.single.hpp'),d=`#define LEXY_PLAYGROUND_PRODUCTION ${b}`,e=await fetch_local_file('/cpp/playground_prefix.cpp'),f=await fetch_local_file('/cpp/playground_main.cpp');return c+'\n'+d+'\n'+e+'\n'+a+'\n'+f}const d=`#define LEXY_PLAYGROUND_PRODUCTION ${b}`,e=await fetch_local_file('/cpp/godbolt_prefix.cpp'),f=await fetch_local_file('/cpp/godbolt_main.cpp');return d+'\n'+e+a+'\n'+f}export async function compile_and_run(g,e,f){var a={},d,h,i;a.source=g,a.options={},a.options.userArguments="-fno-color-diagnostics -std=c++20",a.options.executeParameters={args:[f],stdin:e},a.options.compilerOptions={executorRequest:!0},a.options.filters={execute:!0},a.options.tools=[],a.options.libraries=[lexy_id],a.lang="c++";const c=await fetch(`${api}/compiler/${compiler_id}/compile`,{method:"POST",headers:{'Content-Type':'application/json',Accept:'application/json'},body:JSON.stringify(a)});if(!c.ok)return{success:!1,message:`Compiler Explorer error: ${c.status} - ${c.statusText}`};const b=await c.json();return b.didExecute?b.code==3?(d=b.stderr.map(a=>a.text).join("\n"),{success:!1,message:d}):(h=b.stdout.map(a=>a.text).join("\n"),i=b.stderr.map(a=>a.text).join("\n"),{success:!0,stdout:h,stderr:i,code:b.code}):(d=b.buildResult.stderr.map(a=>a.text).join("\n"),{success:!1,message:d})}function get_godbolt_clientstate(c,d){var a={},b;return a.id=1,a.language="c++",a.source=c,a.compilers=[],b={},b.id=compiler_id,b.libs=[lexy_id],b.options="-std=c++20",a.executors=[{compiler:b,stdin:d,stdinVisible:!0}],{sessions:[a]}}export async function get_godbolt_permalink(a,b){const d=get_godbolt_clientstate(a,b),c=await fetch(api+"shortener",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(d)});return c.ok?(await c.json()).url:get_godbolt_url(a,b)}export function get_godbolt_url(a,b){const c=get_godbolt_clientstate(a,b),d=JSON.stringify(c);return"https://godbolt.org/clientstate/"+encodeURIComponent(btoa(d))}export async function load_example(c){const a=/\/\/ INPUT:(.*)\n/,b=await fetch_local_file(c),d=b.replace(a,''),e=(a.exec(b)?.[1]??"").replaceAll("\\n","\n");return{grammar:d.trim(),input:e,production:"production"}}export async function load_godbolt_url(e){const b=await fetch(api+"shortlinkinfo/"+e);if(!b.ok)return{grammar:"",input:"",production:""};const f=await b.json(),d=f.sessions[0],c=d.source,g=d.executors[0].stdin,h=/#define LEXY_PLAYGROUND_PRODUCTION ([a-zA-Z_0-9]+)/,i=h.exec(c)[1],j=/\/\/=== grammar ===\/\/([^]*)\/\/=== main function ===\/\//;let a=j.exec(c)[1];return a=a.trim(),{grammar:a,input:g,production:i}}